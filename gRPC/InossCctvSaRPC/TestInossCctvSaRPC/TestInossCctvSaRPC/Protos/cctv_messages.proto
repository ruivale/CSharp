syntax = "proto3";

option csharp_namespace = "Com.Efacec.ES.TRP.Efarail.Cctv.Grpc.Messages.v1";
option java_package = "com.efacec.es.trp.efarail.cctv.grpc.messages.v1";


import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

import "protos/cctv_enums.proto";


//package com.efacec.es.trp.efarail.cctv.grpc.messages.v1;


////////////////////////////////////////////////////////////////////////////////////
//
// CCTV messages
//
//

//
// THE empty message
message Empty {} 

//
// Generic numeric reply
message Response {
	// The numeric value to return to the caller.
	ResponseValue value = 1;
	// A description of the returned value, if needed/wanted (can be left empty).
	string desc = 2;
}

//
// Generic numeric message
message NumericResponse {
	// The numeric value.
	Response response = 1;
	// The 
	int64 id = 2;
}

//
// Generic multiple numeric message
message NumericsResponse {
	// The numeric value.
	Response response = 1;
	// The 
	repeated int64 ids = 2;
}

//
// Generic version reply
message CctvVersion {
	// The version value.
	int64 version = 1;
	// The subversion value.
	int64 subVersion = 2;
	// The revision value.
	int64 revision = 3;
	// The build value.
	int64 build = 4;
	// A description of the returned value, if needed/wanted (can be left empty).
	string desc = 5;
    // The module.
    VersionMod module = 6;
}

//
// Generic multiple versions reply
message CctvVersions {
    // The requested modules versions.
    repeated CctvVersion versions = 1;
}

//
// The current WorkStation information. Normally used by the auditing system.
message WorkstationInformation {
	// The user name of the logged user, i.e., the user login.
	string userName = 1;
	// The workstation identification.
	int64 id = 2;
}

//
// Message used when version are requested.
message VersionsRequest {
	// The workstation information.
	WorkstationInformation workStationInfo = 1;
    // The requested module.
    VersionMod module = 2;
}

// Basic message holder for connections, i.e., only the source and target data. 
message ConnectionInfo {
	// The source, normally a camera, identification  but could also be a sequence id...
	int64 sourceId = 1;
	// The target equipment, normally a monitor, identification.
	int64 targetId = 2;
}

// Set source in target connection attempts data.
message ConnectionRequest {
	// The basic, i.e. source & target, data.
	ConnectionInfo connectionInfo = 1;
	// The source equipment port (can be left without a value, i.e. 0).
	int64 sourcePort = 2;
	// The target equipment port (can be left without a value, i.e. 0).
	int64 targetPort = 3;
	// Used, if needed to set the address where to connect.
	string address = 4;
}

//
// Struct used while setting connections between sources equipments, normally cameras
// and targets, normally monitors.
message ConnectionsRequest {
	// The workstation information.
	WorkstationInformation workStationInfo = 1;
	// List of connections to attempt.
	repeated ConnectionRequest connectionRequest = 2;
}

//
// Message used when a list of IDs is needed.
message ListIds {
	// The workstation information, if needed.
	WorkstationInformation workStationInfo = 1;
	// Items Ids, whatever tey mean, i.e., sources equipments, targets equipments, 
    // sequences ids, active sequences handles, etc.
	repeated int64 ids = 2;
}

//
// Message used while obtaining targets, normally monitors, connection info. 
// This is not directly used by the Operation service.
message DetailedConnectionInfo {
	// The target identification.
	int64 targetId = 1;
	// The type of active source in a target.
	SourceObj sourceObj = 2;
	// Additional info for SourceObj.REPLAY type.
	int64 handle = 3;
	// The source identification i.e,, an equipment id, a sequence id, etc.
	int64 sourceId = 4;
	// The source station identification when available/used/set.
	int64 stationId = 5;
	// The recorder source identification when available/used/set.
	int64 recorderSourceId = 6;
}

//
// Message used while obtaining targets, normally monitors, connection info.
message DetailedConnectionsInfoResponse {
	// The request reply.
	Response response = 1;
	// the list of targets connection information.
	repeated DetailedConnectionInfo detailedConnInfo = 2;
}

//
// Return message when multiple requests are sent in a single invocation.
message MultipleRequestsResponse {
	// Global reply for the request. If this is OK, then ALL requests were successful. 
	Response globalResponse = 1;
	// The list of IDs and request status of each one of them. 
	// NOTE: if the globalReply is OK, there no need to use this item.
	repeated NumericResponse specificResponses = 2;
}

//
//
message SequenceConnInfo {
	// The connection info, i.e., sequence, the source item in the message, and target.
	ConnectionInfo connectionInfo = 1;
	// Used for syncronous sequences. Values from 0..30, in intervals of 5 meaning seconds.
	// NOTE: nowadays, @2406, not used anymore... but here just in case
	int64 syncTime = 2;
}

//
// 
message StartSequencesRequest {
	// The workstation information.
	WorkstationInformation workStationInfo = 1;
	// The sequences information.
	repeated SequenceConnInfo sequenceConnInfo = 2;
}

//
// The sequence basic information, normally used to define a sequence but NOT a running one.
message Sequence {
	// The sequence identification.
	int64 id = 1;
	// The sequence name.
	string name = 2;
	// The sequence mode: undefined, ciclic or non ciclic.
	SequenceMode mode = 3;
}

//
// Reply message when all sequences are requested.
message ListSequences {
	// All the sequences
	repeated Sequence sequences = 1;
}

//
// The running sequence data holder 
message RunningSequence {
	// The sequence identification. 
    // May not be needed if the handle is set. It can be useful, but not always mandatory.
	int64 id = 1;
	// The running sequence handle, i.e., the running sequence identification.
	int64 handle = 2;
	// The running sequence active target, normally not needed but can be sent just in case.
	int64 targetId = 3;
	// The sequence state. Depending on the operation, this value could be not set.
	SequenceState state = 4;
	// Used for syncronous sequences. Values from 0..30, in intervals of 5 meaning seconds.
	// NOTE: nowadays, @2406, not used anymore... but here just in case.
	int64 syncTime = 5;
}

//
// The running sequences data holder 
message RunningSequencesRequest {
	// The workstation information.
	WorkstationInformation workStationInfo = 1;
	// The running sequencse handles, i.e., the running sequence identification
	repeated RunningSequence runningSequences = 2;	
}

//
// The running sequence reply message.
message RunningSequenceResponse {
	// The running sequence handle and target
	RunningSequence runningSequence = 1;
	// The running sequence state, i.e., one from SequenceOper (When )
	SequenceOper SequenceOper = 2;
}

//
// The running sequences reply message, normally used when obtaining all running sequences.
message RunningSequencesResponse {
	// The running sequences reply message
	repeated RunningSequenceResponse runningSequencesResponse = 1;
}

//
// Used when stopping, pausing, restarting sequences. 
// Only a single SequenceOper can be applied to the given list of sequences or targets.
message SequencesOperationRequest {
	// The workstation information.
	WorkstationInformation workStationInfo = 1;
	// The sequence oper: stop, pause, restart, next or previous step.
	SequenceOper sequenceOper = 2;
	// Items Ids, whatever they mean, i.e., targets equipments or sequences handles 
    // depending on the set prop from MsgRunningSequence.
	repeated RunningSequence runningSequences = 3;
}



//
// Used to start and stop macros. 
// Only a single MacroOper can be applied to the given list of macros.
message MacrosOperationRequest {
	// The workstation information.
	WorkstationInformation workStationInfo = 1;
	// The macro oper, i.e., start or stop.
	MacroOper macroOper = 2;
	// Macros Ids.
	repeated int64 ids = 3;
}

//
// Alarm information
message Alarm {
    // The alarm identification
    AlarmType type = 1;
    // The alarm parameters
    string params = 2;
    // The alarm equipment identification, if any.
    int64 equipmentId = 3;
    // The alarm station identification, if any.
    int64 stationId = 4;
    // The alarm trigger, if any.
    int64 trigger = 5;
}

//
// List of alarms, normally used when obtaing the list of ALL active alarms.
message Alarms {
    // The list of alarms.
    repeated Alarm alarms = 1;
}

//
// Message used when a lock, or unlock, equipments request is invoked.
message LockUnlockEquipsRequest {
	// The list of identifications, normally from cameras.
	ListIds ids = 1;
    // The lock or unlock Operation.
    LockUnlockType LockUnlock = 2;
}





