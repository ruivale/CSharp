/*
syntax = "proto3";

import "cctv_enums.proto";

option csharp_namespace = "com.efacec.es.efarail.cctv.grpc.messages";

package cctv;

////////////////////////////////////////////////////////////////////////////////////
//
// CCTV messages
//
//

//
// Generic numeric message
message MsgNumeric {
	// The numeric value.
	int32 value = 1;
}

//
// Generic numeric reply
message MsgReply {
	// The numeric value to return to the caller.
	// @TODO: point to the returning types values enum?????
	int32 value = 1;
	// A description of the returned value, if needed/wanted (can be left empty).
	string strDesc = 2;
}

//
// The current WorkStation information. Normally used by the auditing system.
message MsgWorkstationInformation {
	// The user name of the logged user, i.e., the user login.
	string strUserName = 1;
	// The workstation identification.
	int32 wsId = 2;
}

//
// Struct used while setting a connection between a source equipment, normally a camera, and a target one, normally a monitor.
message MsgSetSourceInTarget {
	// The workstation information.
	MsgWorkstationInformation wsInfo = 1;
	// The source equipment, normally a camera, identification.
	int32 nSourceId = 2;
	// The target equipment, normally a monitor, identification.
	int32 nTargetId = 3;
	// The source equipment port (can be left without a value, i.e. 0).
	int32 nSourcePort = 4;
	// The target equipment port (can be left without a value, i.e. 0).
	int32 nTargetPort = 5;
}

//
//
message MsgGetSourcesInTargets {
	// All the target Ids.
	repeated uint32 targetIds = 1;
}

//
//
message MsgGetSourceInTarget {
	// The target identification.
	uint32 nTargetId = 1;
	// The type of active source in a target.
	SourceObjType sourceObjType = 2;
	// Additional info for SourceObjType.REPLAY type.
	int32 nHandle = 3;
	// The source identification i.e,, an equipment id, a sequence id, etc.
	int32 nSourceId = 4;
	// The source station identification when available/used/set.
	int32 nStationId = 5;
	// The source station identification when available/used/set.
	int32 nRecSourceId = 6;
}

//
// Struct used while obtaining a target, normally a monitor, connection info.
message MsgGetSourcesInTargetsReply {
	// The request reply.
	MsgReply msgReply = 1;
	// the list of targets connection information.
	repeated MsgGetSourceInTarget sourceInTarget = 2;
}


*/






