/////////////////////////////////////////////////////////////////////////////////////
//  Links:
//      https://learn.microsoft.com/en-us/aspnet/core/grpc/json-transcoding?view=aspnetcore-8.0
//      https://www.infoq.com/articles/dotnet-grpc-json-transcoding/
//      https://learn.microsoft.com/en-us/aspnet/core/grpc/json-transcoding-binding
//      https://learn.microsoft.com/en-us/aspnet/core/grpc/json-transcoding-openapi?view=aspnetcore-8.0
//      https://learn.microsoft.com/en-us/aspnet/core/grpc/aspnetcore?view=aspnetcore-8.0
//      https://cloud.google.com/endpoints/docs/grpc/transcoding
//      https://cloud.google.com/apis/design/naming_convention
//
/////////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";

option csharp_namespace = "Com.Efacec.ES.TRP.Efarail.Cctv.Grpc.Messages.v1";
option java_package = "com.efacec.es.trp.efarail.cctv.grpc.messages.v1";


import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

import "protos/cctv_enums.proto";


//package com.efacec.es.trp.efarail.cctv.grpc.messages.v1;


////////////////////////////////////////////////////////////////////////////////////
//
// CCTV messages
//
//

//
// THE empty message
message Empty {} 

//
// Generic numeric reply
message Response {
	// The numeric value to return to the caller.
	ResponseValue value = 1;
	// A description of the returned value, if needed/wanted (can be left empty).
	string desc = 2;
}

//
// Generic numeric message
message NumericResponse {
	// The numeric value.
	Response response = 1;
	// The numeric response identification
	int64 id = 2;
}

//
// Generic multiple numeric message
message NumericsResponse {
	// The numeric value.
	Response response = 1;
	// The 
	repeated int64 ids = 2;
}

//
// The user message
message User {
    // The user identification
    google.protobuf.Int64Value id = 1;
    // The user name
    google.protobuf.StringValue login = 2;
    // The user name
    google.protobuf.StringValue name = 3;
}

//
// The user access request: login or logout.
message UserAccessRequest {
    // The user identification
    User user = 1;
    // The acces type: login or logout.
    UserAccessType userAccessType = 2;
}

//
// Generic version reply
message CctvVersion {
	// The version value.
	int64 version = 1;
	// The subversion value.
	int64 subVersion = 2;
	// The revision value.
	int64 revision = 3;
	// The build value.
	int64 build = 4;
	// A description of the returned value, if needed/wanted (can be left empty).
	string desc = 5;
    // The module.
    VersionMod module = 6;
}

//
// Generic multiple versions reply
message ListCctvVersions {
    // The requested modules versions.
    repeated CctvVersion versions = 1;
}

//
// The current WorkStation information. Normally used by the auditing system.
message WorkstationInformation {
	// The user name of the logged user, i.e., the user login.
	google.protobuf.StringValue userName = 1;
	// The workstation identification.
	google.protobuf.Int64Value id = 2;
    //
    // TODO: should we add the user id?
}

//
// Message used when version are requested.
message VersionsRequest {
	// The workstation information.
	WorkstationInformation workStationInfo = 1;
    // The requested module.
    VersionMod module = 2;
}

// Basic message holder for connections, i.e., only the source and target data. 
message ConnectionInfo {
	// The source, normally a camera, identification  but could also be a sequence id...
	google.protobuf.Int64Value sourceId = 1;
	// The target equipment, normally a monitor, identification.
	google.protobuf.Int64Value targetId = 2;
}

// Set source in target connection attempts data.
message ConnectionRequest {
	// The basic, i.e. source & target, data.
	ConnectionInfo connectionInfo = 1;
	// The source equipment port (can be left without a value, i.e. 0).
	google.protobuf.Int64Value sourcePort = 2;
	// The target equipment port (can be left without a value, i.e. 0).
	google.protobuf.Int64Value targetPort = 3;
	// Used, if needed to set the address where to connect.
	google.protobuf.StringValue address = 4;
}

//
// Struct used while setting connections between sources equipments, normally cameras
// and targets, normally monitors.
message ConnectionsRequest {
	// The workstation information.
	WorkstationInformation workStationInfo = 1;
	// List of connections to attempt.
	repeated ConnectionRequest connectionRequest = 2;
}

//
// Message used when a list of IDs is needed.
message ListIds {
	// The workstation information, if needed.
	WorkstationInformation workStationInfo = 1;
	// Items Ids, whatever tey mean, i.e., sources equipments, targets equipments, 
    // sequences ids, active sequences handles, etc.
	repeated google.protobuf.Int64Value ids = 2;
}

//
// Message used while obtaining targets, normally monitors, connection info. 
// This is not directly used by the Operation service.
message DetailedConnectionInfo {
	// The target identification.
	int64 targetId = 1;
	// The type of active source in a target.
	SourceObj sourceObj = 2;
	// Additional info for SourceObj.REPLAY type.
	int64 handle = 3;
	// The source identification i.e,, an equipment id, a sequence id, etc.
	int64 sourceId = 4;
	// The source station identification when available/used/set.
	int64 stationId = 5;
	// The recorder source identification when available/used/set.
	int64 recorderSourceId = 6;
}

//
// Message used while obtaining targets, normally monitors, connection info.
message DetailedConnectionsInfoResponse {
	// The request reply.
	Response response = 1;
	// the list of targets connection information.
	repeated DetailedConnectionInfo detailedConnInfo = 2;
}

//
// Return message when multiple requests are sent in a single invocation.
message MultipleRequestsResponse {
	// Global reply for the request. If this is OK, then ALL requests were successful. 
	Response globalResponse = 1;
	// The list of IDs and request status of each one of them. 
	// NOTE: if the globalReply is OK, there no need to use this item.
	repeated NumericResponse specificResponses = 2;
}

//
// Information associated to a sequence start.
message SequenceConnInfo {
	// The connection info, i.e., sequence, the source item in the message, and target.
	ConnectionInfo connectionInfo = 1;
	// Used for syncronous sequences. Values from 0..30, in intervals of 5 meaning seconds.
	// NOTE: nowadays, @2406, not used anymore... but here just in case
	google.protobuf.StringValue syncTime = 2;
}

//
// 
message StartSequencesRequest {
	// The workstation information.
	WorkstationInformation workStationInfo = 1;
	// The sequences information.
	repeated SequenceConnInfo sequenceConnInfo = 2;
}

//
// The sequence basic information, normally used to define a sequence but NOT a running one.
message Sequence {
	// The sequence identification.
	int64 id = 1;
	// The sequence name.
	string name = 2;
	// The sequence mode: undefined, ciclic or non ciclic.
	SequenceMode mode = 3;
}

//
// Reply message when all sequences are requested.
message ListSequences {
	// All the sequences
	repeated Sequence sequences = 1;
}

//
// The running sequence data holder 
message RunningSequence {
	// The sequence identification. 
    // May not be needed if the handle is set. It can be useful, but not always mandatory.
	google.protobuf.Int64Value id = 1;
	// The running sequence handle, i.e., the running sequence identification.
	google.protobuf.Int64Value handle = 2;
	// The running sequence active target, normally not needed but can be sent just in case.
	google.protobuf.Int64Value targetId = 3;
	// The sequence state. Depending on the operation, this value could be not set.
	SequenceState state = 4;
	// Used for syncronous sequences. Values from 0..30, in intervals of 5 meaning seconds.
	// NOTE: nowadays, @2406, not used anymore... but here just in case.
	google.protobuf.Int64Value syncTime = 5;
}

//
// The running sequences data holder 
message RunningSequencesRequest {
	// The workstation information.
	WorkstationInformation workStationInfo = 1;
	// The running sequencse handles, i.e., the running sequence identification
	repeated RunningSequence runningSequences = 2;	
}

//
// The running sequence reply message.
message RunningSequenceResponse {
	// The running sequence handle and target
	RunningSequence runningSequence = 1;
	// The running sequence state, i.e., one from SequenceOper (When )
	SequenceOper SequenceOper = 2;
}

//
// The running sequences reply message, normally used when obtaining all running sequences.
message RunningSequencesResponse {
	// The running sequences reply message
	repeated RunningSequenceResponse runningSequencesResponse = 1;
}

//
// Used when stopping, pausing, restarting sequences. 
// Only a single SequenceOper can be applied to the given list of sequences or targets.
message SequencesOperationRequest {
	// The workstation information.
	WorkstationInformation workStationInfo = 1;
	// The sequence oper: stop, pause, restart, next or previous step.
	SequenceOper sequenceOper = 2;
	// Items Ids, whatever they mean, i.e., targets equipments or sequences handles 
    // depending on the set prop from MsgRunningSequence.
	repeated RunningSequence runningSequences = 3;
}

//
// Used to start and stop macros. 
// Only a single MacroOper can be applied to the given list of macros.
message MacrosOperationRequest {
	// The workstation information.
	WorkstationInformation workStationInfo = 1;
	// The macro oper, i.e., start or stop.
	MacroOper macroOper = 2;
	// Macros Ids.
	repeated google.protobuf.Int64Value ids = 3;
}

//
// Alarm information
message Alarm {
    // The alarm identification
    AlarmType type = 1;
    // The alarm parameters
    string params = 2;
    // The alarm equipment identification, if any.
    int64 equipmentId = 3;
    // The alarm station identification, if any.
    int64 stationId = 4;
    // The alarm trigger, if any.
    int64 trigger = 5;
}

//
// List of alarms, normally used when obtaing the list of ALL active alarms.
message ListAlarms {
    // The list of alarms.
    repeated Alarm alarms = 1;
}

//
// Message used when a lock, or unlock, equipments request is invoked.
message LockUnlockEquipsRequest {
	// The workstation information.
	WorkstationInformation workStationInfo = 1;
	// The list of identifications, normally from cameras.
	ListIds ids = 2;
    // The lock or unlock Operation.
    LockUnlockType LockUnlock = 3;
}

//
// Equipment generic state
message EquipmentGenericState {
    // The equipment identification
    int64 equipId = 1;
    // The generic state.
    EquipGenericState state = 2;
}

//
// The equipments generic state response
message EquipmentsGenericStateResponse {
    repeated EquipmentGenericState equipsGenericStates = 1;
}

//
// Equipment specific state
message EquipmentSpecificState {
    // The equipment identification
    int64 equipId = 1;
    // The generic state.
    EquipSpecificState state = 2;
}

//
// The equipments specific state response
message EquipmentsSpecificStateResponse {
    repeated EquipmentSpecificState equipsSpecificStates = 1;
}

//
// An equipment associated data.
message Equipment {
    // The equipment identification.
    google.protobuf.Int64Value id = 1;
    // The equipment name.
    google.protobuf.StringValue name = 2;
    // The equipment type.
    google.protobuf.Int64Value type = 3;
    // Is the equipment enabled?
    google.protobuf.BoolValue enabled = 4;
    // The equipment station identification.
    google.protobuf.Int64Value stationId = 5;
    // The equipment communications settings.
    google.protobuf.StringValue commSettings = 6;
    // The equipment generic state.
    EquipGenericState genericState = 7;
    // The equipment specific state.
    EquipSpecificState specificState = 8;
    // The equipment generic configuration.
    google.protobuf.StringValue genericConfig = 9;
    // The equipment specific configuration.
    google.protobuf.StringValue specificConfig = 10;
    // The equipment associated box identification, if any.
    google.protobuf.Int64Value boxId = 11;
}

//
// The equipments response
message ListEquipments {
    repeated Equipment equipments = 1;
}

//
// An equipment associated data.
message EquipmentConfiguration {
    // The equipment identification.
    google.protobuf.Int64Value id = 1;
    // The equipment communications settings.
    google.protobuf.StringValue commSettings = 2;
    // The equipment generic configuration.
    google.protobuf.StringValue genericConfig = 3;
    // The equipment specific configuration.
    google.protobuf.StringValue specificConfig = 4;
}

//
// The equipments configuration response
message EquipmentsConfigurationResponse {
    repeated EquipmentConfiguration equips = 1;
}

//
// A camera preset CRUD operation message.
message CameraPtzfSavePreset {
    // The camera identification.
    google.protobuf.Int64Value camId = 1;
    // The ptzf camera preset slot index.
    google.protobuf.Int64Value presetIdx = 2;
    // The ptzf camera preset name.
    google.protobuf.StringValue presetName = 3;
}

//
// The cameras preset CRUD operations request.
message CameraPtzfSavePresetsRequest {
	// The workstation information.
	WorkstationInformation workStationInfo = 1;
    // The camera identification.
    repeated CameraPtzfSavePreset camerasPtzfSavePresets = 2;
    // The request operation: add, update and delete
    CameraPtzfPresetOperation camPtzfPresetOper = 3;
}

//
// The cameras preset CRUD operation response.
message CameraPtzfSavePresetResponse {
	// The response.
	Response response = 1;
    // The camera preset saving information.
    CameraPtzfSavePreset camPtzfSavePreset = 2;
}

//
// The cameras preset CRUD operations request.
message CameraPtzfSavePresetsResponse {
    // The list of saving cameras presets responses.
    repeated CameraPtzfSavePresetResponse camPtzfSavePresetResponse = 1;
}

//
// The actuator operation: actuate or deactuate.
message ActuatorOperationRequest {
    // The actuator identification.
    google.protobuf.Int64Value actuatorId = 1;
    // The actuator operation.
    ActuatorOperation oper = 2;
}

//
// The actuator operations request.
message ActuatorOperationsRequest {
	// The workstation information.
	WorkstationInformation workStationInfo = 1;
    // The list of actuator operations.
    repeated ActuatorOperationRequest actuatorsOperRequest = 2;
}

//
// Single actuator operation request response.
message ActuatorOperationResponse {
	// The response.
	Response response = 1;
    // The actuator operation.
    ActuatorOperation actuatorOper = 2;
}

//
// Actuators operations requests response.
message ActuatorOperationsResponse {
	// The response.
	repeated ActuatorOperationResponse actuatorsOpersResponse = 1;
}

//
// The "Not Acknowledged Alarm".
message NotAcknowledgedAlarm {
    // The associated monitors list identification.
	int64 groupId = 1;
    // The monitor identification (of course, the given monitor identification, if valid, must be a monitor "belonging" to the group set. ).
	int64 nMonId = 2;
    // The not acknowledged alarm identification.
	int64 nAlarmId = 3;
    // The not acknowledged alarm position "inside" the alarms stack list.
	int64 nPos = 4;
    // The not acknowledged alarm description.
	string sDescription = 5;
    // The not acknowledged alarm source equipment identification, normally pointing to a camera.
	int64 nSourceId = 6;
    // The not acknowledged alarm source equipment, normally a camera, preset, if set and if the camera is a PTZ one.
	int64 nPrePos = 7;
}

//
// The acknowledge alarms response, which, basicaly, is the new list of NotAcknowledgeAlarms.
message AcknowledgeAlarmsResponse {
    repeated NotAcknowledgedAlarm notAcknowledgedAlarms = 1;
}

//
// The "Set Alarms On Monitor" request. Basically is a list of NotAcknowledgeAlarms identifications and target equipments, normally monitors, identifications.
message SetAlarmsOnMonitorRequest {
	// The workstation information.
	WorkstationInformation workStationInfo = 1;
    // The connections info, i.e., source and target identifications pairs.
    repeated ConnectionInfo connectionsInfo = 2;
}

//
// The mark an user alarm message associated with the given source identification. 
message MarkUserAlarmRequest {
	// The workstation information.
	WorkstationInformation workStationInfo = 1;
    // The user identification.
    google.protobuf.Int64Value userId = 2;
    // The source equipment identification.
    google.protobuf.Int64Value equipId = 3;
    // The alarm sub type identification. (from STV DB. t_sensoralarmsubtypes)
    google.protobuf.Int64Value alarmSubtypeId = 4;
    // The marking parameters. (from STV DB: t_sensralarsubtypes_tags_parms)
    google.protobuf.StringValue param = 5;
    // The marking subtype tag id of the sensor. (from STV DB: t_sensoralarmsubtypes_tags)
    google.protobuf.StringValue alarmSensorSubtypeTagId = 6;
    // The marking notes. (from STV DB: t_video_recalarm_params)
    google.protobuf.StringValue notes = 7;
}


//
// A sensor alarm type.
message SensorAlarmType {
    // The sensor alarm type identifiction.
    int64 id = 1;
    // The sensor alarm type description.
    string description = 2;
}

//
// A list of sensor alarm types.
message ListSensorAlarmTypes {
    // The list of SensorAlarmType.
    repeated SensorAlarmType sensorAlarmTypes = 1;
}

//
// A sensor alarm subtype.
message SensorAlarmSubtype {
    // The sensor alarm type identifiction.
    int64 id = 1;
    // The sensor alarm type description.
    string description = 2;
    // The sensor alarm type.
    SensorAlarmType sensorAlarmType = 3;
    // Indicates if the sensor alarm subtype can be searchable in any searchable GUI.
    bool isGuiSearchable = 4;
    // The sensor alarm subtype priority.
    int64 priority = 5;
}

//
// A list of sensor alarm subtypes.
message ListSensorAlarmSubtypes {
    // The list of SensorAlarmSubtype.
    repeated SensorAlarmSubtype sensorAlarmSubtypes = 1;
}

//
// A sensor alarm subtype tag.
message SensorAlarmSubtypesTag {
    // The sensor alarm type identifiction.
    int64 id = 1;
    // The sensor alarm subtype tag description.
    string description = 2;
    // The sensor alarm subtype tag name.
    string name = 3;
    // True if the sensor alarm subtype tag needs parameters when used.
    bool hasParameters = 4;
    // True if the sensor alarm subtype tag allows for notes to be added when used.
    bool allowNotes = 5;
    // The sensor alarm subtype tag associated subtype.
    SensorAlarmSubtype sensorAlarmSubtype = 6;
    // Trie if the sensor alarm subtype tag is te default one in the system.
    bool isDefault = 7;
}

//
// A list of sensor alarm subtype tags.
message ListSensorAlarmSubtypesTags {
    // The list of SensorAlarmSubtype.
    repeated SensorAlarmSubtypesTag sensorAlarmSubtypesTags = 1;
}







