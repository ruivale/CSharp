syntax = "proto3";

option csharp_namespace = "Com.Efacec.ES.TRP.Efarail.Cctv.Grpc.Operation";


import "protos/cctv_enums.proto";
import "protos/cctv_messages.proto";


package cctv;



////////////////////////////////////////////////////////////////////////////////////
//
// CCTV operation interface
//
//
service Operation {

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Generic operations
	//

	// Obtain the Operation service version
	rpc GetVersion(MsgVersions) returns (MsgVersionsReply);

	// Obtains the given targets connection information, if any.
	rpc GetConnectionInfoInTargets(MsgListIds) returns (MsgGetConnInfoInTargetsReply);
	
	// Setting connections between sources equipments, normally cameras, and targets, normally monitors.
	// NOTE: if the globalReply, present in the returned MsgMultipleRequestsReply, 
	//       is OK, there's' no need to use the specific target response item.
	rpc ConnectInTargets(MsgConnectInTargets) returns (MsgMultipleRequestsReply);

	// Disconnects all the given targets. Returns a list of results for each given target.
	// NOTE: if the globalReply, present in the returned MsgMultipleRequestsReply, 
	//       is OK, there's' no need to use the specific target response item.
	rpc DisconnectTargets(MsgListIds) returns (MsgMultipleRequestsReply);

    //
    // Obtain ALL active alarms
    rpc GetAlarms(MsgWorkstationInformation) returns (MsgAlarmsReply);

    // 
    // Lock/Unlock equipments, normally cameras. The r
	// NOTE: if the globalReply, present in the returned MsgMultipleRequestsReply, 
	//       is OK, there's' no need to use the specific lock/unlock response item.
    // 
    //  Param:
    //      message MsgLockUnlock {
	//          // The list of identifications, normally from cameras.
	//          MsgListIds ids = 1;
    //          // The lock or unlock Operation
    //          LockUnlockType LockUnlock = 2;
    //      } 
    //
    //  Returns:
    //      message MsgMultipleRequestsReply {
	//          // Global reply for the request. If this is OK, then ALL requests were successful. 
	//          MsgReply globalReply = 1;
	//          // The list of IDs and request status of each one of them. 
	//          repeated MsgNumericReply specificReplies = 2;
    //      }
    rpc LockUnlockEquipments(MsgLockUnlockEquips) returns (MsgMultipleRequestsReply);

    // 
    // Get ALL locked equipments, normally cameras.
    rpc GetLockedEquipments(MsgWorkstationInformation) returns (MsgNumericsReply);

    //
    // From the given list of stations, obtain ALL its equipments state.
    //rpc GetAllEquipmentsState() returns ();

    //
    // From the given list of stations, obtain ALL its equipments specific state.
    //rpc GetAllEquipmentsSpecificState() returns ();




	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Sequences interfaces 
	//

	// Starting sequences in the targets, normally monitors, all given in the MsgStartSeqsInTargets message.
	// NOTE: if the globalReply, present in the returned MsgMultipleRequestsReply, 
    //       is OK, there's' no need to use the specific target response item.
	rpc StartSequencesInTargets(MsgStartSeqsInTargets) returns (MsgMultipleRequestsReply);

	// Executes sequences operations: stop, pause, restart and steps forward and backward.
	// NOTE: if the globalReply, present in the returned MsgMultipleRequestsReply, 
    //       is OK, there's' no need to use the specific target response item.
	rpc ExecSequencesOperation(MsgSequencesOperation) returns (MsgMultipleRequestsReply);

	// Obtain all running sequences. 
	// The request can be filter by the given WorkStation, targets, sequences handles, etc, 
    // configured in the MsgRunningSequences parameter, if any.
	// Can be used to obtain:
	//		- all running sequences, if the given parameter is unset; 
	//		- sequences states; 
	//		- which, if any, sequences are active in the given targets;
	//		- etc.
	rpc GetRunningSequences(MsgRunningSequences) returns (MsgRunningSequencesReply);



	/////////////////////////////////////////////////////////////////////////////
	// Macros interfaces 
	//

	// Executes macros operations, i.e., start or stop.
	// NOTE: if the globalReply, present in the returned MsgMultipleRequestsReply, 
    //       is OK, there's' no need to use the specific macro response item.
	rpc ExecMacrosOperation(MsgMacrosOperation) returns (MsgMultipleRequestsReply);

}

